import java.time.Instant
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.5.0'
group = 'org.teaconmc'
archivesBaseName = 'SlideShow'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            mods {
                slide_show {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')
            property 'forge.logging.console.level', 'info'
            mods {
                slide_show {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            args '--mod', 'slide_show', '--all', '--output', file('src/generated/resources/')
            mods {
                slide_show {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    compileClasspath.extendsFrom(shadow)
    runtimeClasspath.extendsFrom(shadow)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.6'
    shadow 'org.apache.httpcomponents:httpclient-cache:4.3.6'
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    dependencies {
        it.exclude it.dependency('org.apache.httpcomponents:httpclient:.*')
        it.exclude it.dependency('org.apache.httpcomponents:httpcore:.*')
        it.exclude it.dependency('commons-logging:commons-logging:.*')
        it.exclude it.dependency('commons-codec:commons-codec:.*')
    }
    relocate 'org.apache.http.client.cache', 'org.teacon.slides.http.client.cache'
    relocate 'org.apache.http.impl.client.cache', 'org.teacon.slides.http.impl.client.cache'
}

jar {
    archiveClassifier.set('pure')
    manifest {
        attributes([
            "Specification-Title": "Slide-Show",
            "Specification-Vendor": "TeaConMC",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor": "TeaConMC",
            "Implementation-Timestamp": DateTimeFormatter.ISO_INSTANT.format(Instant.now().truncatedTo(ChronoUnit.SECONDS))
        ])
    }
}

reobf {
    shadowJar {} // Re-obfuscate the shadowed JAR
}

artifacts {
    archives shadowJar
}

jar.finalizedBy('reobfJar')
shadowJar.finalizedBy('reobfShadowJar')

publish.dependsOn('reobfJar')
publish.dependsOn('reobfShadowJar')

publishing {
    publications {
        release(MavenPublication) {
            groupId = "org.teacon"
            artifactId = "SlideShow-Forge-1.16"

            artifact shadowJar
            pom {
                name = 'SlideShow for Minecraft 1.16'
                description = 'Minecraft mod, adding a projector that can display online images.'
                url = 'https://github.com/teaconmc/SlideShow'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://github.com/teaconmc/SlideShow/blob/1.16-forge/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = '3TUSK'
                        name = '3TUSK'
                    }
                    developer {
                        id = 'ustc-zzzz'
                        name = 'ustc-zzzz'
                    }
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = 'https://github.com/teaconmc/SlideShow/issues'
                }
                scm {
                    url = 'https://github.com/teaconmc/SlideShow'
                    connection = 'scm:git:git://github.com/teaconmc/SlideShow.git'
                    developerConnection = 'scm:git:git@github.com:teaconmc/SlideShow.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "teacon"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.ARCHIVE_ACCESS_KEY
                secretKey = System.env.ARCHIVE_SECRET_KEY
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    if (repository && repository.name == "archive") {
        onlyIf {
            System.env.MAVEN_USERNAME && System.env.MAVEN_PASSWORD
        }
    }
}

/**
 * A simple task to pass down the artifact name and path to other GitHub actions.
 */
task("githubActionOutput") {
    onlyIf {
        System.env.GITHUB_ACTIONS
    }
    doLast {
        println "::set-output name=artifact_path::${shadowJar.archiveFile.get().asFile.absolutePath}"
        println "::set-output name=artifact_name::${shadowJar.archiveFileName.get()}"
    }
}
